@startuml
'https://plantuml.com/class-diagram

package Core {
    class Game {
        -gameData : GameData
        -world : World
        -polygons : Map<Entity, Polygon>
        -gameWindow : Pane
        -backgroundImage : ImageView
        -scoreText : Text
        -score : int
        -gamePluginServices : List<IGamePluginService>
        -entityProcessingServiceList : List<IEntityProcessingService>
        -postEntityProcessingServices : List<IPostEntityProcessingService>

        +Game(List<IGamePluginService>, List<IEntityProcessingService>, List<IPostEntityProcessingService>)
        +start(Stage window) : void
        +render() : void
        +update() : void
        +draw() : void
        -getPluginServices() : Collection<? extends IGamePluginService>
        -getEntityProcessingServices() : Collection<? extends IEntityProcessingService>
        -getPostEntityProcessingServices() : Collection<? extends IPostEntityProcessingService>
    }

    class Main extends Application {
        +main(String[] args) : void
        +start(Stage window) : void
    }
    Main --> Game

    class ModuleConfig {
        +ModuleConfig()
        +game() : Game
        +entityProcessingServiceList() : List<IEntityProcessingService>
        +gamePluginServices() : List<IGamePluginService>
        +postEntityProcessingServices() : List<IPostEntityProcessingService>
    }
    ModuleConfig --> Game
}
Core ..> Common
Core.ModuleConfig --> Common.IEntityProcessingService
Core.ModuleConfig --> Common.IGamePluginService
Core.ModuleConfig --> Common.IPostEntityProcessingService
Core.Game --> Common.GameData
Core.Game --> Common.World
Core.Game --> Common.IGamePluginService
Core.Game --> Common.IEntityProcessingService
Core.Game --> Common.IPostEntityProcessingService

package Common {
    interface IEntityProcessingService {
        +process(GameData gameData, World world) : void
    }

    interface IGamePluginService {
        +start(GameData gameData, World world) : void
        +stop(GameData gameData, World world) : void
    }

    interface IPostEntityProcessingService {
        +process(GameData gameData, World world) : void
    }

    class GameData {
        -displayWidth : int
        -displayHeight : int
        -keys : GameKeys

        +getKeys() : GameKeys
        +setDisplayWidth(int width) : void
        +getDisplayWidth() : int
        +setDisplayHeight(int height) : void
        +getDisplayHeight() : int
    }

    class World {
        -entityMap : Map<String, Entity>

        +addEntity(Entity entity) : String
        +removeEntity(String entityID) : void
        +removeEntity(Entity entity) : void
        +getEntities() : Collection<Entity>
        +getEntities(Class<E>... entityTypes) : List<Entity>
        +getEntity(String ID) : Entity
    }
}

'https://stackoverflow.com/questions/54882822/plantuml-class-diagram-field-method-visibility-in-legend
skinparam legendBackgroundColor #ffffff,
legend top left
**Legend**
|=   field |= method |=  |
|      <img:http://s.plantuml.com/private-field.png>      |      <img:http://s.plantuml.com/private-method.png>     | Private |
|      <img:http://s.plantuml.com/protected-field.png>    |      <img:http://s.plantuml.com/protected-method.png>   | Protected |
|      <img:http://s.plantuml.com/package-private-field.png>      |      <img:http://s.plantuml.com/package-private-method.png>    | Package Private |
|      <img:http://s.plantuml.com/public-field.png>      |      <img:http://s.plantuml.com/public-method.png>     | Public |
'https://www.youtube.com/watch?v=pYvL31l-hoY&ab_channel=Randomcode
<img:https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Uml_classes_en.svg/230px-Uml_classes_en.svg.png>

end legend

@enduml